{"version":3,"sources":["../../server/rest-handlers/user.js"],"names":["express","require","bcrypt","jwt","findUserByUsername","AuthenticationError","InvalidArguementError","TOKEN_SALT","router","Router","verifyPasswordAndCreateToken","password","user","Promise","resolve","reject","passwordsMatch","compareSync","hashedPassword","token","sign","username","post","req","res","next","body","then","status","send","catch","error","repeatPassword","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;AACA,IAAME,MAAMF,QAAQ,cAAR,CAAZ;;eAC+BA,QAAQ,kBAAR,C;IAAvBG,kB,YAAAA,kB;;gBAC+CH,QAAQ,iBAAR,C;IAA/CI,mB,aAAAA,mB;IAAqBC,qB,aAAAA,qB;;AAE7B,IAAMC,aAAa,2CAAnB;AACA,IAAMC,SAASR,QAAQS,MAAR,EAAf;;AAGA,IAAMC,+BAA+B,SAA/BA,4BAA+B,CAACC,QAAD,EAAWC,IAAX,EAAoB;AACvD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,iBAAiBd,OAAOe,WAAP,CAAmBN,QAAnB,EAA6BC,KAAKM,cAAlC,CAAvB;AACA,QAAIF,cAAJ,EAAoB;AAClB,UAAMG,QAAQhB,IAAIiB,IAAJ,CAAS;AACrBR,cAAMA,KAAKS;AADU,OAAT,EAEXd,UAFW,CAAd;AAGAO,cAAQK,KAAR;AACD,KALD,MAKO;AACLJ,aAAO,IAAIV,mBAAJ,EAAP;AACD;AACF,GAVM,CAAP;AAWD,CAZD;;AAeAG,OAAOc,IAAP,CAAY,QAAZ,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,kBACTF,IAAIG,IADK;AAAA,MAChCL,QADgC,aAChCA,QADgC;AAAA,MACtBV,QADsB,aACtBA,QADsB;;AAExCP,qBAAmBiB,QAAnB,EAA6BM,IAA7B,CAAkC,UAACf,IAAD,EAAU;AAC1C,WAAOF,6BAA6BC,QAA7B,EAAuCC,IAAvC,CAAP;AACD,GAFD,EAEGe,IAFH,CAEQ,UAACR,KAAD,EAAW;AACjBK,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEV,YAAF,EAArB;AACD,GAJD,EAIGW,KAJH,CAIS;AAAA,WAASL,KAAKM,KAAL,CAAT;AAAA,GAJT;AAKD,CAPD;;AAUAvB,OAAOc,IAAP,CAAY,SAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,mBACMF,IAAIG,IADV;AAAA,MACjCL,QADiC,cACjCA,QADiC;AAAA,MACvBV,QADuB,cACvBA,QADuB;AAAA,MACbqB,cADa,cACbA,cADa;;AAEzC,MAAIrB,aAAaqB,cAAjB,EAAiC;AAC/BP,SAAK,IAAInB,qBAAJ,CAA0B,wBAA1B,CAAL;AACD;AAGF,CAPD;;AAUA2B,OAAOC,OAAP,GAAiB1B,MAAjB","file":"user.js","sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { findUserByUsername } = require('../firebase/user');\nconst { AuthenticationError, InvalidArguementError } = require('../utils/errors');\n\nconst TOKEN_SALT = 'Gn@L=Uys>_v(z}Nu\"~~kVUCg^B\\\\T<A[eGhTp&v8@';\nconst router = express.Router();\n\n\nconst verifyPasswordAndCreateToken = (password, user) => {\n  return new Promise((resolve, reject) => {\n    const passwordsMatch = bcrypt.compareSync(password, user.hashedPassword);\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        user: user.username,\n      }, TOKEN_SALT);\n      resolve(token);\n    } else {\n      reject(new AuthenticationError());\n    }\n  });\n};\n\n\nrouter.post('/login', (req, res, next) => {\n  const { username, password } = req.body;\n  findUserByUsername(username).then((user) => {\n    return verifyPasswordAndCreateToken(password, user);\n  }).then((token) => {\n    res.status(200).send({ token });\n  }).catch(error => next(error));\n});\n\n\nrouter.post('/signup', (req, res, next) => {\n  const { username, password, repeatPassword } = req.body;\n  if (password !== repeatPassword) {\n    next(new InvalidArguementError('Passwords don\\'t match'));\n  }\n\n\n});\n\n\nmodule.exports = router;\n"]}