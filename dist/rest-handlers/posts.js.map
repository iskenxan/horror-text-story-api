{"version":3,"sources":["../../server/rest-handlers/posts.js"],"names":["posts","express","Router","post","req","res","next","body","authorUsername","id","InvalidArgumentError","User","getPublished","then","doc","exists","locals","result","data","ResourceNotFound","catch","error","username","postTitle","published","addToFavorite","postActivityId","reactionId","rankedFeedItem","favoriteCount","addFavoriteReactionId","removeFromFavorite","favoriteObj","favorite","comment","resultComment","Post","addComment","commentCount","module","exports"],"mappings":"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","file":"posts.js","sourcesContent":["import express from 'express';\nimport { InvalidArgumentError, ResourceNotFound } from '../utils/errors';\nimport User from '../firebase/user';\nimport Post from '../firebase/post';\nimport {\n  addFavoriteNotification,\n  addCommentNotification,\n  removeFavoriteNotification,\n} from '../stream';\nimport {\n  addNewCommentToPostRank,\n  addNewFavoriteToPostRank,\n  removeFavoriteFromPostRank,\n} from './feed/ranking-feed';\nimport { getRankFeedItem } from '../utils/formatter';\n\n\nconst posts = new express.Router();\n\nposts.post('/get', (req, res, next) => {\n  const { authorUsername, id } = req.body;\n\n  if (!authorUsername || !id) throw new InvalidArgumentError('authorUsername and postId cannot be empty');\n\n  User.getPublished(authorUsername, id).then((doc) => {\n    if (doc.exists) {\n      res.locals.result = { ...doc.data(), id: doc.id };\n      next();\n    } else throw new ResourceNotFound('Post not found', 404);\n  }).catch(error => next(error));\n});\n\n\nposts.post('/add-favorite', (req, res, next) => {\n  const { username } = res.locals;\n  const {\n    id, authorUsername, postTitle,\n  } = req.body;\n\n  if (!id || !authorUsername || !postTitle) throw new InvalidArgumentError('id, authorUsername and postTitle cannot be null');\n\n  let published;\n  User.getPublished(authorUsername, id)\n    .then((doc) => {\n      if (!doc.exists) next(new ResourceNotFound('Post not found', 404));\n      published = doc.data();\n      return User.addToFavorite(authorUsername, id, postTitle, username);\n    })\n    .then(() => {\n      return addFavoriteNotification(username, authorUsername, id, published.postActivityId);\n    })\n    .then((result) => {\n      const { id: reactionId } = result;\n      const rankedFeedItem = getRankFeedItem(published, authorUsername, id);\n      rankedFeedItem.favoriteCount += 1;\n      addNewFavoriteToPostRank(rankedFeedItem);\n      User.addFavoriteReactionId(authorUsername, id, username, reactionId);\n      next();\n    })\n    .catch(error => next(error));\n});\n\n\nposts.post('/remove-favorite', (req, res, next) => {\n  const { username } = res.locals;\n  const { id, authorUsername } = req.body;\n\n  let post = null;\n  User.getPublished(authorUsername, id)\n    .then((doc) => {\n      if (!doc.exists) next(new ResourceNotFound('Post not found', 404));\n      post = doc.data();\n      return User.removeFromFavorite(authorUsername, id, username);\n    })\n    .then(() => {\n      const favoriteObj = post.favorite[username];\n      if (favoriteObj == null) {\n        return next();\n      }\n      const { reactionId } = favoriteObj;\n      removeFavoriteFromPostRank(id);\n      removeFavoriteNotification(username, reactionId);\n      next();\n    })\n    .catch(error => next(error));\n});\n\n\nposts.post('/add-comment', (req, res, next) => {\n  const { username } = res.locals;\n  const { id, authorUsername, comment } = req.body;\n\n  if (!id || !authorUsername || !comment) throw new InvalidArgumentError('id, authorUsername and comment cannot be null');\n  if (comment.username !== username) throw new InvalidArgumentError('comment does not belong to the user');\n\n  let resultComment;\n  let published;\n  User.getPublished(authorUsername, id)\n    .then((doc) => {\n      if (!doc.exists) return next(new ResourceNotFound('Could not find the post', 404));\n      published = doc.data();\n      return Post.addComment(authorUsername, id, comment);\n    })\n    .then((result) => {\n      resultComment = result;\n      const rankedFeedItem = getRankFeedItem(published, authorUsername, id);\n      rankedFeedItem.commentCount += 1;\n      addNewCommentToPostRank(rankedFeedItem);\n      if (authorUsername !== username) {\n        return addCommentNotification(username, authorUsername, id, published.postActivityId);\n      }\n    })\n    .then(() => {\n      res.locals.result = resultComment;\n      next();\n    })\n    .catch(error => next(error));\n});\n\nmodule.exports = posts;\n"]}