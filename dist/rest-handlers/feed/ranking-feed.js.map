{"version":3,"sources":["../../../server/rest-handlers/feed/ranking-feed.js"],"names":["getFeed","db","collection","doc","get","then","snapshot","data","posts","updateFeed","update","getPost","postId","post","_","filter","value","key","length","addPostToRankingFeed","rankedFeedItem","feedItems","Object","keys","id","removePostFromRankingFeed","addRanking","feedItem","favoritePoints","favoriteCount","ranking","orderRankedFeedItems","array","map","sortBy","reverse","convertArrayFeedItemsToObject","forEach","keyBy","addReactionToPostRank","reaction","extractedPost","lastIndex","lowestRankingItem","removeFavoriteFromPostRank","addNewCommentToPostRank","addNewFavoriteToPostRank","getRankedFeed","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;AAGA,IAAMA,UAAU,SAAVA,OAAU,GAAM;AACpB,SAAOC,aAAGC,UAAH,CAAc,cAAd,EAA8BC,GAA9B,CAAkC,MAAlC,EAA0CC,GAA1C,GACJC,IADI,CACC,UAACC,QAAD,EAAc;AAAA,yBACAA,SAASC,IAAT,EADA;AAAA,QACVC,KADU,kBACVA,KADU;;AAElB,WAAOA,KAAP;AACD,GAJI,CAAP;AAKD,CAND;;AASA,IAAMC,aAAa,SAAbA,UAAa,CAACD,KAAD,EAAW;AAC5B,SAAOP,aAAGC,UAAH,CAAc,cAAd,EAA8BC,GAA9B,CAAkC,MAAlC,EAA0CO,MAA1C,CAAiD;AACtDF;AADsD,GAAjD,CAAP;AAGD,CAJD;;AAOA,IAAMG,UAAU,SAAVA,OAAU,CAACH,KAAD,EAAQI,MAAR,EAAmB;AACjC,MAAMC,OAAOC,iBAAEC,MAAF,CAASP,KAAT,EAAgB,UAACQ,KAAD,EAAQC,GAAR,EAAgB;AAC3C,WAAOA,QAAQL,MAAf;AACD,GAFY,CAAb;;AAIA,SAAOC,KAAKK,MAAL,GAAc,CAAd,GAAkBL,KAAK,CAAL,CAAlB,GAA4B,IAAnC;AACD,CAND;;AASA,IAAMM,uBAAuB,SAAvBA,oBAAuB,CAACC,cAAD,EAAoB;AAC/C,SAAOpB,UACJK,IADI,CACC,UAACgB,SAAD,EAAe;AACnB,QAAIC,OAAOC,IAAP,CAAYF,SAAZ,EAAuBH,MAAvB,IAAiC,GAArC,EAA0C;AAC1CG,cAAUD,eAAeI,EAAzB,IAA+BJ,cAA/B;AACA,WAAOX,WAAWY,SAAX,CAAP;AACD,GALI,CAAP;AAMD,CAPD;;AAUA,IAAMI,4BAA4B,SAA5BA,yBAA4B,CAACb,MAAD,EAAY;AAC5C,SAAOZ,UACJK,IADI,CACC,UAACgB,SAAD,EAAe;AACnB,QAAMR,OAAOF,QAAQU,SAAR,EAAmBT,MAAnB,CAAb;AACA,QAAI,CAACC,IAAL,EAAW;;AAEX,WAAOQ,UAAUT,MAAV,CAAP;AACA,WAAOH,WAAWY,SAAX,CAAP;AACD,GAPI,CAAP;AAQD,CATD;;AAYA,IAAMK,aAAa,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC/B,MAAMC,iBAAiBD,SAASE,aAAT,IAA0B,CAAjD;AACA;AACA;AACA,MAAMC,UAAUF,cAAhB;;AAEA,sBAAYD,QAAZ,IAAsBG,gBAAtB;AACD,CAPD;;AAUA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACV,SAAD,EAAe;AAC1C,MAAIW,QAAQV,OAAOC,IAAP,CAAYF,SAAZ,EAAuBY,GAAvB,CAA2B;AAAA,sBAAUT,IAAIP,GAAd,IAAsBI,UAAUJ,GAAV,CAAtB;AAAA,GAA3B,CAAZ;AACAe,UAAQA,MAAMC,GAAN,CAAU;AAAA,WAAQP,WAAWb,IAAX,CAAR;AAAA,GAAV,CAAR;AACAmB,UAAQlB,iBAAEoB,MAAF,CAASF,KAAT,EAAgB,SAAhB,CAAR;AACAA,UAAQlB,iBAAEqB,OAAF,CAAUH,KAAV,CAAR;;AAEA,SAAOA,KAAP;AACD,CAPD;;AAUA,IAAMI,gCAAgC,SAAhCA,6BAAgC,CAACf,SAAD,EAAe;AACnDA,YAAUgB,OAAV,CAAkB;AAAA,WAAQ,OAAOxB,KAAKiB,OAApB;AAAA,GAAlB;;AAEA,SAAOhB,iBAAEwB,KAAF,CAAQjB,SAAR,EAAmB,IAAnB,CAAP;AACD,CAJD;;AAOA,IAAMkB,wBAAwB,SAAxBA,qBAAwB,CAACZ,QAAD,EAAWa,QAAX,EAAwB;AACpD,SAAOxC,UACJK,IADI,CACC,UAACgB,SAAD,EAAe;AACnB,QAAMoB,gBAAgB9B,QAAQU,SAAR,EAAmBM,SAASH,EAA5B,CAAtB;AACA,QAAIiB,aAAJ,EAAmB;AACjBA,oBAAcD,QAAd,IAA0BC,cAAcD,QAAd,IACtBC,cAAcD,QAAd,IAA0B,CADJ,GACQ,CADlC;AAEA,aAAO/B,WAAWY,SAAX,CAAP;AACD;AACDM,eAAWD,WAAWC,QAAX,CAAX;AACAN,gBAAYU,qBAAqBV,SAArB,CAAZ;AACA,QAAMqB,YAAYrB,UAAUH,MAAV,GAAmB,CAArC;AACA,QAAMyB,oBAAoBtB,UAAUqB,SAAV,CAA1B;AACA,QAAIC,kBAAkBb,OAAlB,GAA4BH,SAASG,OAAzC,EAAkD;AAChDT,gBAAUqB,SAAV,IAAuBf,QAAvB;AACAN,kBAAYe,8BAA8Bf,SAA9B,CAAZ;;AAEA,aAAOZ,WAAWY,SAAX,CAAP;AACD;AACF,GAlBI,CAAP;AAmBD,CApBD;;AAuBA,IAAMuB,6BAA6B,SAA7BA,0BAA6B,CAAChC,MAAD,EAAY;AAC7C,SAAOZ,UACJK,IADI,CACC,UAACG,KAAD,EAAW;AACf,QAAMK,OAAOF,QAAQH,KAAR,EAAeI,MAAf,CAAb;AACA,QAAI,CAACC,IAAL,EAAW;;AAEXA,SAAKgB,aAAL,IAAsB,CAAtB;;AAEApB,eAAWD,KAAX;AACD,GARI,CAAP;AASD,CAVD;;AAaA,IAAMqC,0BAA0B,SAA1BA,uBAA0B,CAACzB,cAAD,EAAoB;AAClD,SAAOmB,sBAAsBnB,cAAtB,EAAsC,cAAtC,CAAP;AACD,CAFD;;AAKA,IAAM0B,2BAA2B,SAA3BA,wBAA2B,CAAC1B,cAAD,EAAoB;AACnD,SAAOmB,sBAAsBnB,cAAtB,EAAsC,eAAtC,CAAP;AACD,CAFD;;AAKA,IAAM2B,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B,SAAO/C,UACJK,IADI,CACC,UAACgB,SAAD,EAAe;AACnB,WAAOU,qBAAqBV,SAArB,CAAP;AACD,GAHI,CAAP;AAID,CALD;;AAQA2B,OAAOC,OAAP,GAAiB;AACf9B,4CADe;AAEf0B,kDAFe;AAGfC,oDAHe;AAIfC,8BAJe;AAKftB,sDALe;AAMfmB;AANe,CAAjB","file":"ranking-feed.js","sourcesContent":["import _ from 'lodash';\nimport { db } from '../../firebase';\n\n\nconst getFeed = () => {\n  return db.collection('ranking-feed').doc('feed').get()\n    .then((snapshot) => {\n      const { posts } = snapshot.data();\n      return posts;\n    });\n};\n\n\nconst updateFeed = (posts) => {\n  return db.collection('ranking-feed').doc('feed').update({\n    posts,\n  });\n};\n\n\nconst getPost = (posts, postId) => {\n  const post = _.filter(posts, (value, key) => {\n    return key === postId;\n  });\n\n  return post.length > 0 ? post[0] : null;\n};\n\n\nconst addPostToRankingFeed = (rankedFeedItem) => {\n  return getFeed()\n    .then((feedItems) => {\n      if (Object.keys(feedItems).length >= 300) return;\n      feedItems[rankedFeedItem.id] = rankedFeedItem;\n      return updateFeed(feedItems);\n    });\n};\n\n\nconst removePostFromRankingFeed = (postId) => {\n  return getFeed()\n    .then((feedItems) => {\n      const post = getPost(feedItems, postId);\n      if (!post) return;\n\n      delete feedItems[postId];\n      return updateFeed(feedItems);\n    });\n};\n\n\nconst addRanking = (feedItem) => {\n  const favoritePoints = feedItem.favoriteCount || 0;\n  // const commentPoints = feedItem.commentCount ? feedItem.commentCount * 2 : 0;\n  // const ranking = favoritePoints + commentPoints;\n  const ranking = favoritePoints;\n\n  return { ...feedItem, ranking };\n};\n\n\nconst orderRankedFeedItems = (feedItems) => {\n  let array = Object.keys(feedItems).map(key => ({ id: key, ...feedItems[key] }));\n  array = array.map(post => addRanking(post));\n  array = _.sortBy(array, 'ranking');\n  array = _.reverse(array);\n\n  return array;\n};\n\n\nconst convertArrayFeedItemsToObject = (feedItems) => {\n  feedItems.forEach(post => delete post.ranking);\n\n  return _.keyBy(feedItems, 'id');\n};\n\n\nconst addReactionToPostRank = (feedItem, reaction) => {\n  return getFeed()\n    .then((feedItems) => {\n      const extractedPost = getPost(feedItems, feedItem.id);\n      if (extractedPost) {\n        extractedPost[reaction] = extractedPost[reaction]\n          ? extractedPost[reaction] + 1 : 1;\n        return updateFeed(feedItems);\n      }\n      feedItem = addRanking(feedItem);\n      feedItems = orderRankedFeedItems(feedItems);\n      const lastIndex = feedItems.length - 1;\n      const lowestRankingItem = feedItems[lastIndex];\n      if (lowestRankingItem.ranking < feedItem.ranking) {\n        feedItems[lastIndex] = feedItem;\n        feedItems = convertArrayFeedItemsToObject(feedItems);\n\n        return updateFeed(feedItems);\n      }\n    });\n};\n\n\nconst removeFavoriteFromPostRank = (postId) => {\n  return getFeed()\n    .then((posts) => {\n      const post = getPost(posts, postId);\n      if (!post) return;\n\n      post.favoriteCount -= 1;\n\n      updateFeed(posts);\n    });\n};\n\n\nconst addNewCommentToPostRank = (rankedFeedItem) => {\n  return addReactionToPostRank(rankedFeedItem, 'commentCount');\n};\n\n\nconst addNewFavoriteToPostRank = (rankedFeedItem) => {\n  return addReactionToPostRank(rankedFeedItem, 'favoriteCount');\n};\n\n\nconst getRankedFeed = () => {\n  return getFeed()\n    .then((feedItems) => {\n      return orderRankedFeedItems(feedItems);\n    });\n};\n\n\nmodule.exports = {\n  addPostToRankingFeed,\n  addNewCommentToPostRank,\n  addNewFavoriteToPostRank,\n  getRankedFeed,\n  removePostFromRankingFeed,\n  removeFavoriteFromPostRank,\n};\n"]}