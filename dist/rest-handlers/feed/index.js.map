{"version":3,"sources":["../../../server/rest-handlers/feed/index.js"],"names":["index","express","Router","formatFeed","results","formatted","timeline","map","author","activity","actor","id","object","title","postTitle","lastUpdated","timestamp","favoriteCount","reaction_counts","like","commentCount","comment","post","req","res","next","username","locals","feed","then","result","rankedFeed","popular","catch","error","formatResult","forEach","type","activities","activityObject","module","exports"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,QAAQ,IAAIC,kBAAQC,MAAZ,EAAd;;AAGA,IAAMC,aAAa,SAAbA,UAAa,CAACC,OAAD,EAAa;AAC9B,MAAMC,YAAY,EAAlB;AACA,MAAMC,WAAWF,QAAQG,GAAR,CAAY;AAAA,WAAa;AACxCC,cAAQC,SAASC,KADuB;AAExCC,UAAIF,SAASG,MAF2B;AAGxCC,aAAOJ,SAASK,SAHwB;AAIxCC,mBAAaN,SAASO,SAJkB;AAKxCC,qBAAeR,SAASS,eAAT,CAAyBC,IALA;AAMxCC,oBAAcX,SAASS,eAAT,CAAyBG;AANC,KAAb;AAAA,GAAZ,CAAjB;AAQAhB,YAAUC,QAAV,GAAqBA,QAArB;;AAEA,SAAOD,SAAP;AACD,CAbD;;AAgBAL,MAAMsB,IAAN,CAAW,cAAX,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MACrCC,QADqC,GACxBF,IAAIG,MADoB,CACrCD,QADqC;;AAE7C,MAAIE,aAAJ;AACA,+BAAgBF,QAAhB,EAA0BG,IAA1B,CAA+B,UAACC,MAAD,EAAY;AACzCF,WAAOzB,WAAW2B,OAAO1B,OAAlB,CAAP;AACA,WAAO,iCAAP;AACD,GAHD,EAIGyB,IAJH,CAIQ,UAACE,UAAD,EAAgB;AACpBH,SAAKI,OAAL,GAAeD,UAAf;AACAP,QAAIG,MAAJ,CAAWG,MAAX,GAAoBF,IAApB;AACAH;AACD,GARH,EASGQ,KATH,CASS;AAAA,WAASR,KAAKS,KAAL,CAAT;AAAA,GATT;AAUD,CAbD;;AAgBA,IAAMC,eAAe,SAAfA,YAAe,CAACL,MAAD,EAAY;AAC/BA,SAAO1B,OAAP,CAAegC,OAAf,CAAuB,UAACC,IAAD,EAAU;AAC/BA,SAAKC,UAAL,CAAgBF,OAAhB,CAAwB,UAAC3B,QAAD,EAAc;AACpC,UAAM8B,iBAAiB9B,SAASG,MAAhC;AACA,aAAOH,SAASG,MAAhB;AACAH,eAAS8B,cAAT,GAA0BA,cAA1B;AACD,KAJD;AAKD,GAND;AAOD,CARD;;AAWAvC,MAAMsB,IAAN,CAAW,kBAAX,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MACzCC,QADyC,GAC5BF,IAAIG,MADwB,CACzCD,QADyC;;AAEjD,mCAAoBA,QAApB,EAA8BG,IAA9B,CAAmC,UAACC,MAAD,EAAY;AAC7CK,iBAAaL,MAAb;AACAN,QAAIG,MAAJ,CAAWG,MAAX,GAAoBA,MAApB;AACAL;AACD,GAJD,EAKGQ,KALH,CAKS;AAAA,WAASR,KAAKS,KAAL,CAAT;AAAA,GALT;AAMD,CARD;;AAUAM,OAAOC,OAAP,GAAiBzC,KAAjB","file":"index.js","sourcesContent":["import express from 'express';\nimport { getTimelineFeed, getNotificationFeed } from '../../stream';\nimport { getRankedFeed } from './ranking-feed';\n\nconst index = new express.Router();\n\n\nconst formatFeed = (results) => {\n  const formatted = {};\n  const timeline = results.map(activity => ({\n    author: activity.actor,\n    id: activity.object,\n    title: activity.postTitle,\n    lastUpdated: activity.timestamp,\n    favoriteCount: activity.reaction_counts.like,\n    commentCount: activity.reaction_counts.comment,\n  }));\n  formatted.timeline = timeline;\n\n  return formatted;\n};\n\n\nindex.post('/timeline/me', (req, res, next) => {\n  const { username } = res.locals;\n  let feed;\n  getTimelineFeed(username).then((result) => {\n    feed = formatFeed(result.results);\n    return getRankedFeed();\n  })\n    .then((rankedFeed) => {\n      feed.popular = rankedFeed;\n      res.locals.result = feed;\n      next();\n    })\n    .catch(error => next(error));\n});\n\n\nconst formatResult = (result) => {\n  result.results.forEach((type) => {\n    type.activities.forEach((activity) => {\n      const activityObject = activity.object;\n      delete activity.object;\n      activity.activityObject = activityObject;\n    });\n  });\n};\n\n\nindex.post('/notification/me', (req, res, next) => {\n  const { username } = res.locals;\n  getNotificationFeed(username).then((result) => {\n    formatResult(result);\n    res.locals.result = result;\n    next();\n  })\n    .catch(error => next(error));\n});\n\nmodule.exports = index;\n"]}