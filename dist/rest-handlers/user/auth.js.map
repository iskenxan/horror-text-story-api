{"version":3,"sources":["../../../server/rest-handlers/user/auth.js"],"names":["router","express","Router","checkPassword","password","user","Promise","resolve","reject","passwordsMatch","bcrypt","compareSync","hashedPassword","AuthenticationError","post","req","res","next","token","body","username","resultUser","User","findUserByUsername","then","doc","exists","data","undefined","ResourceNotFound","locals","result","catch","error","InvalidArgumentError","repeatPassword","newUser","writeToDb","status","end","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport { generateToken } from '../../encrypt';\nimport User from '../../firebase/user';\nimport {\n  AuthenticationError,\n  InvalidArgumentError,\n  ResourceNotFound,\n} from '../../utils/errors';\n\n\nconst router = express.Router();\n\nconst checkPassword = (password, user) => {\n  return new Promise((resolve, reject) => {\n    const passwordsMatch = bcrypt.compareSync(password, user.hashedPassword);\n    if (passwordsMatch) {\n      resolve();\n    }\n    reject(new AuthenticationError('Incorrect password'));\n  });\n};\n\n\nrouter.post('/login', (req, res, next) => {\n  let token = null;\n  const { username, password } = req.body;\n  let resultUser = null;\n  if (username && password) {\n    User.findUserByUsername(username).then((doc) => {\n      if (doc.exists) {\n        const user = doc.data();\n        resultUser = { ...user, hashedPassword: undefined };\n        return checkPassword(password, user);\n      }\n      return Promise.reject(new ResourceNotFound('User not found'));\n    }).then(() => {\n      token = generateToken(username);\n    }).then(() => {\n      res.locals.result = { user: resultUser, token };\n      next();\n    })\n      .catch(error => next(error));\n  } else {\n    next(new InvalidArgumentError('Username and password cannot be empty'));\n  }\n});\n\n\nrouter.post('/signup', (req, res, next) => {\n  const { username, password, repeatPassword } = req.body;\n  if (!username || !password || !repeatPassword) {\n    throw new InvalidArgumentError('username, password and repeat password cannot be empty');\n  }\n  if (password !== repeatPassword) {\n    throw new InvalidArgumentError('Passwords don\\'t match');\n  }\n  User.findUserByUsername(username).then((doc) => {\n    if (doc.exists) {\n      throw new InvalidArgumentError('Username is taken');\n    } else {\n      const token = generateToken(username);\n      const newUser = new User(username, password, token);\n      newUser.writeToDb();\n      res.locals.result = { user: { ...newUser, hashedPassword: undefined }, token };\n      next();\n    }\n  }).catch(error => next(error));\n});\n\n\nrouter.post('/logout', (req, res, next) => {\n  res.status(200).end();// just keeping here for future needs\n  next();\n});\n\n\nmodule.exports = router;\n"]}