{"version":3,"sources":["../../../server/rest-handlers/user/posts.js"],"names":["router","express","Router","post","req","res","next","id","body","username","locals","InvalidArgumentError","User","unpublish","then","draft","result","catch","error","deleteDraft","published","savePublished","rankedFeedItem","title","lastUpdated","activityId","updatePublished","postActivityId","updateDraft","resultDraft","saveDraft","savedDraft","getPublished","doc","exists","data","ResourceNotFound","getDraft","module","exports"],"mappings":"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","file":"posts.js","sourcesContent":["import express from 'express';\nimport User from '../../firebase/user';\nimport {\n  InvalidArgumentError,\n  ResourceNotFound,\n} from '../../utils/errors';\nimport { addPostActivity, removePostActivity, removePostNotifications } from '../../stream';\nimport { addPostToRankingFeed, removePostFromRankingFeed } from '../feed/ranking-feed';\nimport { getRankFeedItem } from '../../utils/formatter';\n\n\nconst router = express.Router();\n\n\nrouter.post('/published/unpublish', (req, res, next) => {\n  const { id } = req.body;\n  const { username } = res.locals;\n  if (!id) {\n    next(new InvalidArgumentError('Post id cannot be empty'));\n  }\n\n  User.unpublish(username, id)\n    .then((draft) => {\n      removePostFromRankingFeed(id);\n      removePostActivity(username, id);\n      removePostNotifications(username, id);\n      res.locals.result = draft;\n      next();\n    }).catch(error => next(error));\n});\n\n\nrouter.post('/draft/publish', (req, res, next) => {\n  const { draft } = req.body;\n  const { username } = res.locals;\n  if (!draft) {\n    next(new InvalidArgumentError('Draft cannot be empty'));\n  }\n  if (draft.id) {\n    User.deleteDraft(draft.id, username).catch(error => next(error));\n  }\n  let published = null;\n  User.savePublished(draft, username)\n    .then((result) => {\n      published = result;\n      const rankedFeedItem = getRankFeedItem(published, username, published.id);\n      addPostToRankingFeed(rankedFeedItem);\n      return addPostActivity(username, published.id, published.title, published.lastUpdated);\n    })\n    .then((result) => {\n      const { id: activityId } = result;\n      User.updatePublished(username, published.id, 'postActivityId', activityId);\n      res.locals.result = { ...published, postActivityId: activityId };\n      next();\n    })\n    .catch(error => next(error));\n});\n\n\nrouter.post('/draft/update', (req, res, next) => {\n  const { draft } = req.body;\n  const { username } = res.locals;\n  if (!draft || !draft.id) {\n    next(new InvalidArgumentError('Draft, draft id cannot be null'));\n  }\n  User.updateDraft(username, draft).then((resultDraft) => {\n    res.locals.result = { ...resultDraft };\n    next();\n  }).catch(error => next(error));\n});\n\n\nrouter.post('/draft/save', (req, res, next) => {\n  const { draft } = req.body;\n  const { username } = res.locals;\n  if (draft) {\n    User.saveDraft(username, draft).then((savedDraft) => {\n      res.locals.result = { ...savedDraft };\n      next();\n    }).catch(error => next(error));\n  } else {\n    next(new InvalidArgumentError('Draft cannot be empty'));\n  }\n});\n\n\nrouter.post('/published/get', (req, res, next) => {\n  const { id } = req.body;\n  const { username } = res.locals;\n  if (!id) {\n    next(new InvalidArgumentError('Published id cannot be empty'));\n  }\n  User.getPublished(username, id).then((doc) => {\n    if (doc.exists) {\n      res.locals.result = { ...doc.data(), id: doc.id };\n      next();\n    } else {\n      next(new ResourceNotFound('Post not found', 404));\n    }\n  }).catch(error => next(error));\n});\n\n\nrouter.post('/draft/get', (req, res, next) => {\n  const { id } = req.body;\n  const { username } = res.locals;\n  if (id) {\n    User.getDraft(username, id).then((doc) => {\n      if (doc.exists) {\n        res.locals.result = { ...doc.data(), id: doc.id };\n        next();\n      }\n    }).catch(error => next(error));\n  } else {\n    next(new InvalidArgumentError('Draft id cannot be empty'));\n  }\n});\n\n\nrouter.post('/draft/delete', (req, res, next) => {\n  const { id } = req.body;\n  const { username } = res.locals;\n  if (!id) {\n    next(new InvalidArgumentError('Draft id cannot be empty'));\n  }\n  User.deleteDraft(id, username).then(() => {\n    res.locals.result = id;\n    next();\n  }).catch(error => next(error));\n});\n\n\nmodule.exports = router;\n"]}