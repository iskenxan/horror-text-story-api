{"version":3,"sources":["../../server/firebase/user.js"],"names":["User","username","password","hashedPassword","publishedRefs","draftRefs","followers","following","db","collection","doc","get","setNotificationToken","notificationToken","update","removeFromFavorite","authorUsername","postId","FieldValue","adminFirestore","firestore","delete","then","arrayRemove","addFavoriteReactionId","reactionId","addToFavorite","title","arrayUnion","author","follow","followingUsername","follower","unfollow","unpublish","InvalidArgumentError","post","lastUpdated","Date","getTime","getPublished","exists","ResourceNotFound","data","postActivityId","favorite","comments","set","id","_saveDraftRef","deletePost","savePublished","dialogCount","postCopy","_saveInCollection","snapshot","_savePublishedRef","created","updatePublished","updateKey","updateValue","getDraft","draftId","updateDraft","draft","_updateInDraftsCollection","draftCopy","deleteDraft","saveDraft","ref","preface","characters","dialog","writeToDb","findUserByUsername","Promise","reject","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport adminFirestore from 'firebase-admin';\nimport { db } from './index';\nimport { generateHashedPassword, verifyToken } from '../encrypt';\nimport { InvalidArgumentError, ResourceNotFound } from '../utils/errors';\n\nclass User {\n  constructor(username, password) {\n    this.username = username;\n    this.hashedPassword = generateHashedPassword(password);\n    this.publishedRefs = {};\n    this.draftRefs = {};\n    this.followers = [];\n    this.following = [];\n  }\n\n  writeToDb = () => {\n    return User.findUserByUsername(this.username).then((doc) => {\n      if (doc.exists) {\n        return Promise.reject(new InvalidArgumentError('User with the give username already exists'));\n      }\n      return db.collection('users').doc(this.username).set({\n        username: this.username,\n        hashedPassword: this.hashedPassword,\n        publishedRefs: this.publishedRefs,\n        draftRefs: this.draftRefs,\n        followers: this.followers,\n        following: this.following,\n      });\n    });\n  };\n\n\n  static setNotificationToken = (username, notificationToken) => {\n    return db.collection('users').doc(username)\n      .update({\n        notificationToken,\n      });\n  }\n\n\n  static removeFromFavorite = (authorUsername, postId, username) => {\n    const { FieldValue } = adminFirestore.firestore;\n    return db.collection('users').doc(authorUsername).collection('published').doc(postId)\n      .update({\n        [`favorite.${username}`]: FieldValue.delete(),\n      })\n      .then(() => {\n        return db.collection('users').doc(authorUsername).update({\n          [`publishedRefs.${postId}.favorite`]: FieldValue.arrayRemove(username),\n        });\n      })\n      .then(() => {\n        return db.collection('users').doc(username).update({\n          [`favorite.${postId}`]: FieldValue.delete(),\n        });\n      });\n  };\n\n\n  static addFavoriteReactionId = (authorUsername, postId, username, reactionId) => {\n    return db.collection('users').doc(authorUsername).collection('published').doc(postId)\n      .update({\n        [`favorite.${username}.reactionId`]: reactionId,\n      });\n  };\n\n\n  static addToFavorite = (authorUsername, postId, title, username) => {\n    return db.collection('users').doc(authorUsername).collection('published').doc(postId)\n      .update({\n        [`favorite.${username}`]: { username },\n      })\n      .then(() => {\n        return db.collection('users').doc(authorUsername).update({\n          [`publishedRefs.${postId}.favorite`]: adminFirestore.firestore.FieldValue.arrayUnion(username),\n        });\n      })\n      .then(() => {\n        return db.collection('users').doc(username).update({\n          [`favorite.${postId}`]: {\n            author: authorUsername,\n            title,\n          },\n        });\n      });\n  };\n\n\n  static follow = (followingUsername, follower) => {\n    return db.collection('users').doc(follower.username)\n      .update({\n        following: adminFirestore.firestore.FieldValue.arrayUnion(followingUsername),\n      })\n      .then(() => {\n        return db.collection('users').doc(followingUsername).update({\n          followers: adminFirestore.firestore.FieldValue.arrayUnion(follower.username),\n        });\n      });\n  };\n\n\n  static unfollow = (followingUsername, follower) => {\n    return db.collection('users').doc(follower.username)\n      .update({\n        following: adminFirestore.firestore.FieldValue.arrayRemove(followingUsername),\n      })\n      .then(() => {\n        return db.collection('users').doc(followingUsername).update({\n          followers: adminFirestore.firestore.FieldValue.arrayRemove(follower.username),\n        });\n      });\n  };\n\n\n  static findUserByUsername(username) {\n    return db.collection('users').doc(username).get();\n  }\n\n\n  static unpublish = (username, postId) => {\n    if (!username || !postId || username === '' || postId === '') {\n      throw new InvalidArgumentError('Username and post id cannot be empty');\n    }\n    let post = null;\n    const lastUpdated = new Date().getTime();\n    return User.getPublished(username, postId)\n      .then((doc) => {\n        if (!doc.exists) {\n          throw new ResourceNotFound('Post was not found');\n        }\n        post = doc.data();\n        delete post.postActivityId;\n        delete post.favorite;\n        delete post.comments;\n        post.lastUpdated = lastUpdated;\n        return db.collection('users').doc(username).collection('drafts').doc(postId)\n          .set({ ...post });\n      })\n      .then(() => {\n        post.id = postId;\n        return User._saveDraftRef(username, { ...post }, lastUpdated);\n      })\n      .then(() => {\n        return User.deletePost(postId, username);\n      })\n      .then(() => post);\n  };\n\n\n  static getPublished = (username, postId) => {\n    if (!username || !postId || username === '' || postId === '') {\n      throw new InvalidArgumentError('Username and draft id cannot be empty');\n    }\n    return db.collection('users').doc(username).collection('published').doc(postId)\n      .get();\n  };\n\n\n  static savePublished = (post, username) => {\n    if (!post.title || post.title === '') {\n      throw new InvalidArgumentError('Title cannot be empty');\n    }\n    if (post.dialogCount <= 2) {\n      throw new InvalidArgumentError('Post must have at least 3 dialog messages');\n    }\n    const lastUpdated = new Date().getTime();\n    const postCopy = { ...post };\n\n    return User._saveInCollection(username, post, 'published', lastUpdated).then((snapshot) => {\n      postCopy.id = snapshot.id;\n      return User._savePublishedRef(username, { ...postCopy }, lastUpdated);\n    }).then(() => postCopy);\n  };\n\n\n  static _savePublishedRef = (username, post, lastUpdated) => {\n    const created = post.created ? post.created : lastUpdated;\n\n    return db.collection('users').doc(username).update({\n      [`publishedRefs.${post.id}`]: {\n        title: post.title,\n        created,\n        lastUpdated,\n        author: username,\n        id: post.id,\n        favorite: [],\n      },\n    });\n  };\n\n\n  static updatePublished = (username, postId, updateKey, updateValue) => {\n    return db.collection('users').doc(username)\n      .collection('published').doc(postId)\n      .update({\n        [updateKey]: updateValue,\n      });\n  };\n\n  static getDraft = (username, draftId) => {\n    if (!username || !draftId || username === '' || draftId === '') {\n      throw new InvalidArgumentError('Username and draft id cannot be empty');\n    }\n    return db.collection('users').doc(username)\n      .collection('drafts').doc(draftId)\n      .get();\n  };\n\n\n  static updateDraft = (username, draft) => {\n    if (!draft.title || draft.title === '' || !draft.id || draft.id === '') {\n      throw new InvalidArgumentError('Title and id cannot be empty');\n    }\n    const lastUpdated = new Date().getTime();\n    return User._updateInDraftsCollection(username, draft, lastUpdated).then(() => {\n      return User._saveDraftRef(username, draft, lastUpdated).then(() => {\n        draft.lastUpdated = lastUpdated;\n        return draft;\n      });\n    });\n  };\n\n\n  static _updateInDraftsCollection = (username, draft, lastUpdated) => {\n    const draftCopy = { ...draft };\n    delete draftCopy.id;\n    draftCopy.lastUpdated = lastUpdated;\n\n    return db.collection('users').doc(username).collection('drafts').doc(draft.id)\n      .update(draftCopy);\n  };\n\n\n  static deletePost = (postId, username) => {\n    return db.collection('users').doc(username).collection('published').doc(postId)\n      .delete()\n      .then(() => {\n        return db.collection('users').doc(username).update({\n          [`publishedRefs.${postId}`]: adminFirestore.firestore.FieldValue.delete(),\n        });\n      });\n  };\n\n\n  static deleteDraft = (draftId, username) => {\n    return db.collection('users').doc(username).collection('drafts').doc(draftId)\n      .delete()\n      .then(() => {\n        return db.collection('users').doc(username).update({\n          [`draftRefs.${draftId}`]: adminFirestore.firestore.FieldValue.delete(),\n        });\n      });\n  };\n\n\n  static saveDraft = (username, draft) => {\n    if (!draft.title || draft.title === '') {\n      throw new InvalidArgumentError('Title cannot be empty');\n    }\n    const lastUpdated = new Date().getTime();\n    return User._saveInCollection(username, draft, 'drafts', lastUpdated).then((ref) => {\n      const { id } = ref;\n      return User._saveDraftRef(username, { ...draft, id: ref.id }, lastUpdated).then(() => {\n        return {\n          ...draft, id, lastUpdated, author: username,\n        };\n      });\n    });\n  };\n\n\n  static _saveInCollection = (username, post, collection, lastUpdated) => {\n    const created = post.created ? post.created : lastUpdated;\n    const ref = db.collection('users').doc(username).collection(collection).doc();\n    const { id } = ref;\n    return ref.set({\n      preface: post.preface,\n      title: post.title,\n      characters: post.characters,\n      dialog: post.dialog,\n      dialogCount: post.dialogCount,\n      created,\n      lastUpdated,\n      author: username,\n      favorite: {},\n      id,\n    }).then(() => {\n      return ref;\n    });\n  };\n\n\n  static _saveDraftRef = (username, draft, lastUpdated) => {\n    const created = draft.created ? draft.created : lastUpdated;\n\n    return db.collection('users').doc(username).update({\n      [`draftRefs.${draft.id}`]: {\n        title: draft.title,\n        created,\n        lastUpdated,\n        author: username,\n        favorite: [],\n        id: draft.id,\n      },\n    });\n  };\n}\n\nmodule.exports = User;\n"]}