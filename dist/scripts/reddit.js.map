{"version":3,"sources":["../../server/scripts/reddit.js"],"names":["getAccessToken","method","headers","url","data","qs","stringify","grant_type","username","password","auth","getListings","accessToken","after","Authorization","getUsers","array","max","then","response","newAfter","children","usernames","map","item","author","length","Promise","resolve","users","getAllUsers","access_token","result","catch","error","console","log","fetchRedditUsers","newArray","user","sent","db","collection","doc","update","sendMessage","to","api_type","subject","text","trySendMessage","token","get","snapshot","promise","slice","forEach","module","exports"],"mappings":"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","file":"reddit.js","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport { db } from '../firebase';\n\n\nconst getAccessToken = () => {\n  return axios({\n    method: 'post',\n    headers: { 'content-type': 'application/x-www-form-urlencoded' },\n    url: 'https://www.reddit.com/api/v1/access_token',\n    data: qs.stringify({\n      grant_type: 'password',\n      username: 'iskenxan',\n      password: 'ms11d23',\n\n    }),\n    auth: {\n      username: 'qt4pdhEqHtuwJQ',\n      password: 'OuGRujmXVdykJcUd78w5_kRoOtQ',\n    },\n  });\n};\n\n\nconst getListings = (accessToken, after) => {\n  return axios({\n    method: 'get',\n    headers: { Authorization: `Bearer ${accessToken}`, 'User-Agent': 'ChangeMeClient/0.1 by iskenxan' },\n    url: `https://oauth.reddit.com/r/nosleep/new/?after=${after}&limit=100`,\n  });\n};\n\n\nconst getUsers = (accessToken, array, max, after) => {\n  return getListings(accessToken, after).then((response) => {\n    const { data } = response.data;\n    const { after: newAfter, children } = data;\n    const usernames = children.map((item) => {\n      const { author } = item.data;\n      return author;\n    });\n    if (array.length <= max - 101) {\n      return getUsers(accessToken, [...array, ...usernames], max, newAfter);\n    }\n    return Promise.resolve({ users: array, after: newAfter });\n  });\n};\n\n\nconst getAllUsers = () => {\n  const array = [];\n  return getAccessToken().then((response) => {\n    const { access_token: accessToken } = response.data;\n    return getUsers(accessToken, array, 1000, null);\n  }).then((result) => {\n    return result;\n  })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\n\nconst fetchRedditUsers = () => {\n  getAllUsers().then(({ users, after }) => {\n    const newArray = users.map((user) => {\n      return { username: user, sent: false };\n    });\n    db.collection('reddit').doc('users').update({\n      users: newArray,\n      after,\n    });\n  });\n};\n\n\nconst sendMessage = (accessToken, to) => {\n  return axios({\n    method: 'post',\n    headers: { 'content-type': 'application/x-www-form-urlencoded', Authorization: `Bearer ${accessToken}`, 'User-Agent': 'ChangeMeClient/0.1 by iskenxan' },\n    url: 'https://oauth.reddit.com/api/compose',\n    data: qs.stringify({\n      api_type: 'json',\n      subject: 'Friendly requests',\n      text: 'Hey there!\\nYou got this message because I saw your post on `nosleep` subreddit so I assume you like sharing your scary stories with others!\\n'\n      + '\\nDo not feel obligated to response!'\n      + '\\nI recently wrote this Android app called Spookies:Â https://play.google.com/store/apps/details?id=samatov.space.spookies&hl=en\\n'\n      + 'It\\'s made for writing scary stories in a chat room format. You a probably familiar with Hooked, it\\'s a similar concept, except my app actually let\\'s you write your own story and share it with others. You can get followers, like and comment on other stories.\\n'\n      + 'The app is free and doesn\\'t have any limit on it.\\n'\n      + 'The app is currently at its early stage so any content is very welcome!\\n'\n      + 'So check it out and let me know what you think, maybe even leave a review if you feel like itxw. Thank you!',\n      to,\n    }),\n  });\n};\n\nconst trySendMessage = () => {\n  let token;\n  getAccessToken().then((response) => {\n    const { access_token: accessToken } = response.data;\n    token = accessToken;\n    return db.collection('reddit').doc('users').get();\n  })\n    .then((snapshot) => {\n      let promise = Promise.resolve();\n      const array = snapshot.data().users.slice(201, 900);\n      array.forEach((user) => {\n        promise = promise.then(() => sendMessage(token, user.username));\n      });\n      return promise;\n    })\n    .then(() => {\n      console.log('sent');\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\n\nmodule.exports = { trySendMessage };\n"]}