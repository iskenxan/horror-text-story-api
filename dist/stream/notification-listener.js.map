{"version":3,"sources":["../../server/stream/notification-listener.js"],"names":["store","ACTIONS","follow","like","comment","getBodyAndTitle","data","item","verb","actor","action","title","body","subscribeNotificationListener","username","notificationToken","handler","notifData","new","token","console","log","then","catch","error","e","exports","startListeningToNotifications","result","Object","keys","forEach"],"mappings":";;AAAA;;AAGA;;AAGA;;AAIA,IAAMA,QAAQ,EAAd;;AAIA,IAAMC,UAAU;AACdC,UAAQ,eADM;AAEdC,QAAM,mBAFQ;AAGdC,WAAS;AAHK,CAAhB;;AAOA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAChC,MAAMC,OAAOD,KAAK,CAAL,CAAb;AADgC,MAExBE,IAFwB,GAERD,IAFQ,CAExBC,IAFwB;AAAA,MAElBC,KAFkB,GAERF,IAFQ,CAElBE,KAFkB;;AAGhC,MAAI,CAACD,IAAD,IAAS,CAACC,KAAd,EAAqB,OAAO,IAAP;AACrB,MAAMC,SAAST,QAAQO,IAAR,CAAf;;AAEA,MAAMG,QAAQ,YAAd;AACA,MAAMC,OAAUH,KAAV,SAAmBC,MAAzB;;AAEA,SAAO;AACLC,gBADK;AAELC;AAFK,GAAP;AAID,CAbD;;AAgBA,IAAMC,gCAAgC,SAAhCA,6BAAgC,CAACC,QAAD,EAAWC,iBAAX,EAAiC;AACrE,MAAIf,MAAMc,QAAN,CAAJ,EAAqB;AACnBd,UAAMc,QAAN,EAAgBC,iBAAhB,GAAoCA,iBAApC;AACA;AACD;;AAGDf,QAAMc,QAAN,IAAkB;AAChBE,aAAS,iBAACV,IAAD,EAAU;AACjB,UAAMW,YAAYZ,gBAAgBC,KAAKY,GAArB,CAAlB;AACA,UAAMC,QAAQnB,MAAMc,QAAN,EAAgBC,iBAA9B;AACAK,cAAQC,GAAR,CAAY,EAAEf,UAAF,EAAQa,YAAR,EAAZ;AACA,iCAAiBA,KAAjB,EAAwBF,SAAxB;AACD,KANe;AAOhBF;AAPgB,GAAlB;;AAUA,sCAAwBD,QAAxB,EAAkCd,MAAMc,QAAN,EAAgBE,OAAlD,EACGM,IADH,CACQ;AAAA,WAAMF,QAAQC,GAAR,mBAA4BP,QAA5B,aAAN;AAAA,GADR,EAEGS,KAFH,CAES;AAAA,WAAKH,QAAQC,GAAR,CAAY,EAAEG,OAAOC,CAAT,EAAZ,CAAL;AAAA,GAFT;AAGD,CApBD;;AAsBAC,QAAQb,6BAAR,GAAwCA,6BAAxC;;AAGAa,QAAQC,6BAAR,GAAwC,YAAM;AAC5C,SAAO,6CAAgCL,IAAhC,CAAqC,UAACM,MAAD,EAAY;AACtDC,WAAOC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAACjB,QAAD,EAAc;AAAA,UAChCC,iBADgC,GACVa,OAAOd,QAAP,CADU,CAChCC,iBADgC;;AAExC,UAAI,CAACD,QAAD,IAAa,CAACC,iBAAlB,EAAqC;AACrCF,oCAA8BC,QAA9B,EAAwCC,iBAAxC;AACD,KAJD;AAKD,GANM,CAAP;AAOD,CARD","file":"notification-listener.js","sourcesContent":["import {\n  getUsersWithNotificationToken,\n} from '../firebase/search';\nimport {\n  subscribeToNotification,\n} from './index';\nimport {\n  sendNotification,\n} from '../firebase/fcm';\n\nconst store = {\n\n};\n\nconst ACTIONS = {\n  follow: 'followed you!',\n  like: 'liked your story!',\n  comment: 'commented on your story!',\n};\n\n\nconst getBodyAndTitle = (data) => {\n  const item = data[0];\n  const { verb, actor } = item;\n  if (!verb || !actor) return null;\n  const action = ACTIONS[verb];\n\n  const title = 'New update';\n  const body = `${actor} ${action}`;\n\n  return {\n    title,\n    body,\n  };\n};\n\n\nconst subscribeNotificationListener = (username, notificationToken) => {\n  if (store[username]) {\n    store[username].notificationToken = notificationToken;\n    return;\n  }\n\n\n  store[username] = {\n    handler: (data) => {\n      const notifData = getBodyAndTitle(data.new);\n      const token = store[username].notificationToken;\n      console.log({ data, token });\n      sendNotification(token, notifData);\n    },\n    notificationToken,\n  };\n\n  subscribeToNotification(username, store[username].handler)\n    .then(() => console.log(`listening to ${username} notifs`))\n    .catch(e => console.log({ error: e }));\n};\n\nexports.subscribeNotificationListener = subscribeNotificationListener;\n\n\nexports.startListeningToNotifications = () => {\n  return getUsersWithNotificationToken().then((result) => {\n    Object.keys(result).forEach((username) => {\n      const { notificationToken } = result[username];\n      if (!username || !notificationToken) return;\n      subscribeNotificationListener(username, notificationToken);\n    });\n  });\n};\n"]}