{"version":3,"sources":["../server/app.js"],"names":["express","require","bodyParser","userRoute","app","use","json","req","res","next","header","errorHandling","err","status","message","stackTrace","process","env","NODE_ENV","evn","stack","send","error","port","PORT","listen","console","log"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,IAAME,YAAYF,QAAQ,sBAAR,CAAlB;;AAGA,IAAMG,MAAMJ,SAAZ;AACAI,IAAIC,GAAJ,CAAQH,WAAWI,IAAX,EAAR;;AAGAF,IAAIC,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,gDAA3C;AACAD;AACD,CAJD;;AAOAL,IAAIC,GAAJ,CAAQ,OAAR,EAAiBF,SAAjB;;AAGA;AACA,IAAMQ,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAML,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7C,MAAMI,SAASD,IAAIC,MAAJ,IAAc,GAA7B;AACA,MAAMC,UAAUD,WAAW,GAAX,GAAiB,uBAAjB,GAA2CD,IAAIE,OAA/D;AACA,MAAIC,aAAa,IAAjB;AACA,MAAI,CAACC,QAAQC,GAAR,CAAYC,QAAb,IAAyB,CAACF,QAAQG,GAAR,CAAYD,QAAb,KAA0B,YAAvD,EAAqE;AACnEH,iBAAaH,IAAIQ,KAAjB;AACD;AACDZ,MAAIK,MAAJ,CAAWA,MAAX,EAAmBQ,IAAnB,CAAwB;AACtBC,WAAO;AACLT,oBADK;AAELC,sBAFK;AAGLC;AAHK;AADe,GAAxB;AAOD,CAdD;;AAiBAX,IAAIC,GAAJ,CAAQM,aAAR;;AAGA,IAAMY,OAAOP,QAAQC,GAAR,CAAYO,IAAZ,IAAoB,IAAjC;;AAEApB,IAAIqB,MAAJ,CAAWF,IAAX,EAAiB,YAAM;AACrBG,UAAQC,GAAR,wBAAiCJ,IAAjC;AACD,CAFD","file":"app.js","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst userRoute = require('./rest-handlers/user');\n\n\nconst app = express();\napp.use(bodyParser.json());\n\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\n\napp.use('/user', userRoute);\n\n\n// eslint-disable-next-line no-unused-vars\nconst errorHandling = (err, req, res, next) => {\n  const status = err.status || 500;\n  const message = status === 500 ? 'Internal server error' : err.message;\n  let stackTrace = null;\n  if (!process.env.NODE_ENV || !process.evn.NODE_ENV === 'production') {\n    stackTrace = err.stack;\n  }\n  res.status(status).send({\n    error: {\n      status,\n      message,\n      stackTrace,\n    },\n  });\n};\n\n\napp.use(errorHandling);\n\n\nconst port = process.env.PORT || 3001;\n\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});\n"]}