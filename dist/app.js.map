{"version":3,"sources":["../server/app.js"],"names":["NON_SECURE_PATHS","app","use","bodyParser","json","req","res","next","header","post","token","body","notSecure","filter","path","includes","then","username","locals","catch","error","AuthenticationError","user","search","posts","feed","resultHandling","result","status","send","ok","errorHandling","err","code","message","stackTrace","process","env","NODE_ENV","evn","stack","console","log","port","PORT","listen"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport user from './rest-handlers/user';\nimport search from './rest-handlers/search';\nimport posts from './rest-handlers/posts';\nimport feed from './rest-handlers/feed';\nimport { verifyToken } from './encrypt';\nimport { AuthenticationError } from './utils/errors';\n\n\nconst NON_SECURE_PATHS = ['/user/auth', '/user/profile/profile-image/save'];\n\nconst app = express();\napp.use(bodyParser.json());\n\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\n\n// Security token check\napp.post('*', (req, res, next) => {\n  const { token } = req.body;\n  let notSecure = false;\n  NON_SECURE_PATHS.filter((path) => {\n    if (req.path.includes(path)) notSecure = true;\n  });\n\n  if (notSecure) return next();\n\n  if (token) {\n    return verifyToken(token).then((username) => {\n      res.locals.username = username;\n      next();\n    })\n      .catch(error => next(error));\n  }\n  return next(new AuthenticationError('No security token was passed'));\n});\n\n\napp.use('/user', user);\napp.use('/search', search);\napp.use('/posts', posts);\napp.use('/feed', feed);\n\n\nconst resultHandling = (req, res, next) => {\n  if (res.locals.result) {\n    res.status(200).send({ ok: true, result: res.locals.result });\n  } else {\n    res.status(200).send({ ok: true });\n  }\n  next();\n};\n\napp.use(resultHandling);\n\n\n// eslint-disable-next-line no-unused-vars\nconst errorHandling = (err, req, res, next) => {\n  let status = err.status || 500;\n  if (err.code === 5) {\n    status = 404;\n  }\n  const message = status === 500 ? 'Internal server error' : err.message;\n  let stackTrace = null;\n  if (!process.env.NODE_ENV || !process.evn.NODE_ENV === 'production') {\n    stackTrace = err.stack;\n  }\n  console.log(stackTrace);\n  res.status(status).send({\n    ok: false,\n    error: {\n      status,\n      message,\n      stackTrace,\n    },\n  });\n};\n\n\napp.use(errorHandling);\n\n\nconst port = process.env.PORT || 3001;\n\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});\n"]}